-- Tabla para almacenar los géneros favoritos de los usuarios
CREATE TABLE favorite_genres (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  genre_ids INTEGER[] NOT NULL DEFAULT '{}',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(user_id)
);

-- Índice para búsquedas por user_id en la tabla favorite_genres
CREATE INDEX favorite_genres_user_id_idx ON favorite_genres(user_id);

-- Tabla para almacenar las películas favoritas de los usuarios
CREATE TABLE favorites (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  movie_id INTEGER NOT NULL,
  movie_data JSONB NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(user_id, movie_id)
);

-- Índice para búsquedas por user_id en la tabla favorites
CREATE INDEX favorites_user_id_idx ON favorites(user_id);

-- Tabla para almacenar las calificaciones de películas de los usuarios
CREATE TABLE ratings (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  movie_id INTEGER NOT NULL,
  rating SMALLINT NOT NULL CHECK (rating >= 1 AND rating <= 10),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(user_id, movie_id)
);

-- Índice para búsquedas por user_id en la tabla ratings
CREATE INDEX ratings_user_id_idx ON ratings(user_id);

-- Políticas de seguridad para la tabla favorite_genres
CREATE POLICY "Los usuarios pueden ver sus propios géneros favoritos"
  ON favorite_genres FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY "Los usuarios pueden insertar sus propios géneros favoritos"
  ON favorite_genres FOR INSERT
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Los usuarios pueden actualizar sus propios géneros favoritos"
  ON favorite_genres FOR UPDATE
  USING (auth.uid() = user_id);

-- Políticas de seguridad para la tabla favorites
CREATE POLICY "Los usuarios pueden ver sus propias películas favoritas"
  ON favorites FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY "Los usuarios pueden insertar sus propias películas favoritas"
  ON favorites FOR INSERT
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Los usuarios pueden eliminar sus propias películas favoritas"
  ON favorites FOR DELETE
  USING (auth.uid() = user_id);

-- Políticas de seguridad para la tabla ratings
CREATE POLICY "Los usuarios pueden ver sus propias calificaciones"
  ON ratings FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY "Los usuarios pueden insertar sus propias calificaciones"
  ON ratings FOR INSERT
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Los usuarios pueden actualizar sus propias calificaciones"
  ON ratings FOR UPDATE
  USING (auth.uid() = user_id);

-- Habilitar RLS (Row Level Security) en todas las tablas
ALTER TABLE favorite_genres ENABLE ROW LEVEL SECURITY;
ALTER TABLE favorites ENABLE ROW LEVEL SECURITY;
ALTER TABLE ratings ENABLE ROW LEVEL SECURITY;